MODULE Environment(
        S2A_red,S3A_red,S4A_red,
        S2B_red,S3B_red,S4B_red,
        S2A_green,S3A_green,S4A_green,
        S2B_green,S3B_green,S4B_green,
        P1A_goal_straight,P1A_goal_curved,
        P1B_goal_straight,P1B_goal_curved,
        P2A_goal_straight,P2A_goal_curved,
        P2B_goal_straight,P2B_goal_curved
    )
  VAR
    switch1 : Switch(goal1);
    switch2 : Switch(goal2);
    train : Train(switch1, switch2, S1A_red, S1B_red, signals1, signals2);
    signals1 : Signals(train.T1A, train.T2A, train.T3A);
    signals2 : Signals(train.T1B, train.T2B, train.T3B);
  DEFINE
    goal1 := case
      P1A_goal_straight : straight;
      TRUE : curved;
    esac;

    goal2 := case
      P2A_goal_straight : straight;
      TRUE : curved;
    esac;

    T1A_occupied := train.T1A;
    T2A_occupied := train.T2A;
    T3A_occupied := train.T3A;
    T4A_occupied := train.T4A;
    T1B_occupied := train.T1B;
    T2B_occupied := train.T2B;
    T3B_occupied := train.T3B;
    T4B_occupied := train.T4B;
    S1A_red   := TRUE;
    S1B_red   := TRUE;
    S1A_green := FALSE;
    S1B_green := FALSE;

    P1A_locked_straight := switch1.state = straight;
    P2B_locked_straight := switch1.state = straight;
    P1A_locked_curved := switch1.state = curved;
    P2B_locked_curved := switch1.state = curved;
    P2A_locked_straight := switch2.state = straight;
    P1B_locked_straight := switch2.state = straight;
    P2A_locked_curved := switch2.state = curved;
    P1B_locked_curved := switch2.state = curved;

MODULE Switch(goal)
  VAR
    state : {straight, curved, transitioning};
  ASSIGN
    init(state) := straight;
    next(state) := case
      TRUE: goal;
    esac;

MODULE Train(Switch1, Switch2, S1A, S1B, Signals1, Signals2)
  VAR
    T1A : boolean;
    T2A : boolean;
    T3A : boolean;
    T4A : boolean;
    T1B : boolean;
    T2B : boolean;
    T3B : boolean;
    T4B : boolean;
    train : {no, left, right};
    newTrain : {no, left, right};
  ASSIGN
    init(T1A) := FALSE;
    init(T2A) := FALSE;
    init(T3A) := FALSE;
    init(T4A) := FALSE;
    init(T1B) := FALSE;
    init(T2B) := FALSE;
    init(T3B) := FALSE;
    init(T4B) := FALSE;

    next(T1A) := case
      newTrain = left : TRUE;
      train = left & T1A & Signals1.S1_red : TRUE;
      train = right & T3B & !Signals1.S3_red : TRUE;
      TRUE : FALSE;
    esac;

    next(T2A) := case
      train = left & T1A & !Signals1.S1_red : FALSE;
      TRUE : T2A;
    esac;

    next(T3A) := case
      T2A : TRUE;
      TRUE : FALSE;
    esac;

    next(T4A) := FALSE;

    next(T1B) := case
      newTrain = right : TRUE;
      train = right & T1B & Signals2.S1_red : TRUE;
      train = left & T3A & !Signals2.S3_red : TRUE;
      TRUE : FALSE;
    esac;

    next(T2B) := case
      train = right & T1B & !Signals2.S1_red : FALSE;
      TRUE : T2B;
    esac;

    next(T3B) := case
      T2B : TRUE;
      TRUE : FALSE;
    esac;

    next(T4B) := FALSE;

    next(train) := case
      newTrain = right : right;
      newTrain = left : left;
      TRUE : train;
    esac;

    next(newTrain) := case
      newTrain = no & train = no : {left, right};
      TRUE : no;
    esac;

